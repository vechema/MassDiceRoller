{"version":3,"sources":["components/ResultTable.tsx","App.tsx","index.tsx"],"names":["ResultTable","props","rows","runningSum","pip","diceCount","diceCounts","get","relevantQuantity","isExactResult","pipSuffix","rerollIsChecked","undefined","pipsToReroll","has","rerollCheckBox","type","id","checked","onChange","pipsToRerollChangeHandler","displayMax","push","displayMin","reverse","quantityTypeName","rerollHeader","Table","striped","App","React","Component","state","rng","Random","MersenneTwister19937","autoSeed","diceQuantity","rolledDiceCounts","Map","Set","handleRollClick","bind","handleRerollClick","handleDiceQuantityChange","handlePipsToRerollChange","rawRolls","dice","rollResultCounts","roll","set","rolls1","rolls2","pips","_","Array","from","keys","combinedRolls","event","this","setState","target","value","oldState","randomRollResult","newValue","add","delete","numDiceToReroll","newRolledDiceCounts","diceForThisPip","combineRollResults","Container","className","Row","Col","placeholder","Button","onClick","href","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fea51e59.chunk.js","sourcesContent":["import React from 'react';\n\nimport { Table } from 'react-bootstrap';\n\ninterface Props {\n    isExactResult: boolean;\n    displayMin: number;\n    displayMax: number;\n    diceCounts: Map<number,number>\n    pipsToReroll?: Set<number>,\n    pipsToRerollChangeHandler?: (pip: number, newValue: boolean) => void,\n}\n\nconst ResultTable: React.FC<Props> = (props: Props) => {\n  let rows: any[] = [];\n  let runningSum = 0;\n\n  for (let pip = 6; pip >= props.displayMin; pip--) {\n      let diceCount = props.diceCounts.get(pip) || 0;\n      runningSum += diceCount;\n      let relevantQuantity = props.isExactResult ? diceCount : runningSum;\n      let pipSuffix = props.isExactResult ? \"s\" : \"+\";\n      let rerollIsChecked = props.pipsToReroll === undefined ? false : props.pipsToReroll.has(pip);\n      let onChangeHandler = () => {\n        if(props.pipsToRerollChangeHandler === undefined) {\n          return;\n        }\n\n        props.pipsToRerollChangeHandler(pip, !rerollIsChecked);\n      };\n      let rerollCheckBox\n        = props.isExactResult\n        ? <td><input type=\"checkbox\" id={\"reroll\" + pip} checked={rerollIsChecked} onChange={onChangeHandler} /></td>\n        : <></>;\n\n      if(pip <= props.displayMax) {\n        rows.push(<tr key={pip}><td>{pip}{pipSuffix}</td><td>{relevantQuantity}</td>{rerollCheckBox}</tr>)\n      }\n  }\n\n  rows.reverse();\n  \n  let quantityTypeName = props.isExactResult ? \"Exact\" : \"Stat\";\n  let rerollHeader = props.isExactResult ? <th>Reroll?</th> : <></>;\n\n  return ( \n      <Table striped>\n          <thead>\n              <tr>\n                  <th>{quantityTypeName}</th>\n                  <th>Qty</th>\n                  {rerollHeader}\n              </tr>\n          </thead>\n          <tbody>\n            {rows}\n          </tbody>\n\n      </Table>\n  );\n}\n\nexport default ResultTable;","import React from 'react';\n\nimport Container from 'react-bootstrap/Container';\nimport Row from 'react-bootstrap/Row';\nimport Col from 'react-bootstrap/Col';\nimport Button from 'react-bootstrap/Button';\nimport ResultTable from './components/ResultTable';\nimport { MersenneTwister19937, Random } from 'random-js';\nimport * as _ from 'lodash';\n\n\ntype AppState = {\n  rng: Random,\n  diceQuantity: number,\n  rolledDiceCounts: Map<number,number>,\n  pipsToReroll: Set<number>,\n}\n\n// FUTURE USE to ease binding a bunch of member functions\n// eslint-disable-next-line\nclass BaseComponent extends React.Component {\n  constructor(props: any, funcsToBind?: Array<()=>void>) {\n    super(props);\n\n    if(funcsToBind !== undefined) {\n      for (let func of funcsToBind) {\n        this[func.name as keyof this] = (this[func.name as keyof this] as unknown as Function).bind(this);\n      }\n    }\n  }\n}\n\nexport default class App extends React.Component {\n  state: AppState = {\n    rng: new Random(MersenneTwister19937.autoSeed()),\n    diceQuantity: 600,\n    rolledDiceCounts: new Map<number,number>(),\n    pipsToReroll: new Set<number>(),\n  };\n\n  constructor(props: any) {\n    super(props);\n    this.handleRollClick = this.handleRollClick.bind(this);\n    this.handleRerollClick = this.handleRerollClick.bind(this);\n    this.handleDiceQuantityChange = this.handleDiceQuantityChange.bind(this);\n    this.handlePipsToRerollChange = this.handlePipsToRerollChange.bind(this);\n  }\n\n  randomRollResult(rng: Random, diceQuantity: number): Map<number,number> {\n    let rawRolls = rng.dice(6, diceQuantity);\n    let rollResultCounts = new Map<number,number>();\n\n    for(let roll of rawRolls) {\n      rollResultCounts.set(roll, (rollResultCounts.get(roll) || 0) + 1);\n    }\n    return rollResultCounts;\n  }\n\n  combineRollResults(rolls1: Map<number,number>, rolls2: Map<number,number>) {\n    let pips = _.union(Array.from(rolls1.keys()), Array.from(rolls2.keys()));\n    let combinedRolls = new Map<number,number>();\n\n    for(let pip of pips) {\n      combinedRolls.set(pip, (rolls1.get(pip) ?? 0) + (rolls2.get(pip) ?? 0) );\n    }\n\n    return combinedRolls;\n  }\n\n  handleDiceQuantityChange(event: any) {\n    this.setState({diceQuantity: event.target.value});\n  }\n\n  handleRollClick() {\n    this.setState((oldState: AppState) => ({\n      rolledDiceCounts: this.randomRollResult(oldState.rng, oldState.diceQuantity)}));\n  }\n\n  handlePipsToRerollChange(pip: number, newValue: boolean) {\n    this.setState((oldState: AppState) => {\n      newValue ? oldState.pipsToReroll.add(pip) : oldState.pipsToReroll.delete(pip);\n      return { pipsToReroll: oldState.pipsToReroll };\n     });\n  }\n\n  handleRerollClick() {\n    let numDiceToReroll = 0;\n    let newRolledDiceCounts = new Map<number,number>();\n\n    // TODO: some central spot to have PipMin=1 and PipMax=6\n    for(let pip = 1; pip <= 6; pip++) {\n      let diceForThisPip = this.state.rolledDiceCounts.get(pip) ?? 0;\n\n      if(this.state.pipsToReroll.has(pip)) {\n        numDiceToReroll += diceForThisPip;\n        newRolledDiceCounts.set(pip, 0);\n      }\n      else {\n        newRolledDiceCounts.set(pip, diceForThisPip);\n      }\n    }\n\n    newRolledDiceCounts = this.combineRollResults(\n      newRolledDiceCounts,\n       this.randomRollResult(this.state.rng, numDiceToReroll));\n\n    this.setState({rolledDiceCounts: newRolledDiceCounts});\n  }\n\n  render() {\n    return (\n      <Container className=\"p-3\">\n        <h1 className=\"header\">\n          MassDiceRoller\n        </h1>\n        <Row>\n          <Col>\n            <input placeholder=\"Dice Quantity\" value={this.state.diceQuantity} onChange={this.handleDiceQuantityChange} />\n            <Button className=\"m-2\" onClick={this.handleRollClick}>Roll</Button>\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ResultTable isExactResult={false} displayMin={1} displayMax={3} diceCounts={this.state.rolledDiceCounts} />\n          </Col>\n          <Col>\n            <ResultTable isExactResult={false} displayMin={4} displayMax={6} diceCounts={this.state.rolledDiceCounts} />\n          </Col>\n        </Row>\n        <Row>\n          <Col>\n            <ResultTable\n              isExactResult={true}\n              displayMin={1}\n              displayMax={3}\n              diceCounts={this.state.rolledDiceCounts}\n              pipsToReroll={this.state.pipsToReroll}\n              pipsToRerollChangeHandler={this.handlePipsToRerollChange}\n              />\n          </Col>\n          <Col>\n            <ResultTable\n              isExactResult={true}\n              displayMin={4}\n              displayMax={6}\n              diceCounts={this.state.rolledDiceCounts}\n              pipsToReroll={this.state.pipsToReroll}\n              pipsToRerollChangeHandler={this.handlePipsToRerollChange}\n              />\n          </Col>\n        </Row>\n        <Row>\n          <Button className=\"m-2\" onClick={this.handleRerollClick}>Reroll</Button>\n        </Row>\n        <Row>\n          <a href=\"https://github.com/KatyAHG/MassDiceRoller\">GitHub repo</a>\n        </Row>\n      </Container>\n    );\n  }\n};","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}